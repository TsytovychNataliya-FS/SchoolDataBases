{
	"info": {
		"_postman_id": "1e197017-2f5b-4c12-8336-7fbc0ae1f400",
		"name": "School",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "38109820"
	},
	"item": [
		{
			"name": "Teachers",
			"item": [
				{
					"name": "Create New Teacher",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201 (Created)\", function() {",
									"    pm.response.to.have.status(201);",
									"});",
									"pm.test(\"Response contains newly created student's/teacher's data\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('name');",
									"    pm.expect(jsonData).to.have.property('subject');",
									"});",
									"pm.test(\"Response format is JSON\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Dan ten\",\n    \"subject\": \"English\",\n    \"hireDate\": \"05/25/2021\"\n\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:5001/teachers",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"teachers"
							]
						}
					},
					"response": []
				},
				{
					"name": "All Teachers",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response is an array of students/teachers\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an('array');",
									"});",
									"pm.test(\"List of students/teachers is not empty\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.be.greaterThan(0);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:5001/teachers",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"teachers"
							]
						}
					},
					"response": []
				},
				{
					"name": "Teacher by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400 for invalid ID format\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response contains appropriate error message for invalid ID\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.error).to.include('Cast to ObjectId failed'); ",
									"});",
									"pm.test(\"Status code is 400 for non-existent ID\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"",
									"pm.test(\"Status code is 200 for valid ID\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response contains required properties\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('name');",
									"    pm.expect(jsonData).to.have.property('subject');",
									"    pm.expect(jsonData).to.have.property('hireDate'); // Ensure this property exists",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:5001/teachers/66e340312b9d41f187f3da47",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"teachers",
								"66e340312b9d41f187f3da47"
							]
						}
					},
					"response": []
				},
				{
					"name": "Updated the Teacher",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"// In your update request script",
									"pm.test(\"Capture updated name\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.environment.set(\"updatedName\", jsonData.name); // Capture the updated name",
									"});",
									"pm.test(\"Response contains updated fields\", function () {",
									"    const jsonData = pm.response.json();",
									"    const expectedName = pm.environment.get(\"updatedName\");",
									"    pm.expect(jsonData).to.have.property('name').that.equals(expectedName);",
									"});",
									"",
									"",
									"pm.test(\"Response format is JSON\", function () {",
									"    pm.response.to.be.json;",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"Name\": \"Genn Name\"\n\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:5001/teachers/66e340312b9d41f187f3da47",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"teachers",
								"66e340312b9d41f187f3da47"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete a Teacher",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:5001/teachers/66e33fdf2b9d41f187f3da3e",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"teachers",
								"66e33fdf2b9d41f187f3da3e"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Students",
			"item": [
				{
					"name": "Create a student",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201 (Created)\", function() {",
									"    pm.response.to.have.status(201);",
									"});",
									"pm.test(\"Response contains newly created student's/teacher's data\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('name');",
									"    pm.expect(jsonData).to.have.property('age');",
									"});",
									"pm.test(\"Response format is JSON\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Angel Tsy\",\n    \"age\": \"24\",\n    \"teacher\": \"66e340312b9d41f187f3da47\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:5001/students",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"students"
							]
						}
					},
					"response": []
				},
				{
					"name": "All Students",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response is an array of students/teachers\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an('array');",
									"});",
									"pm.test(\"List of students/teachers is not empty\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.be.greaterThan(0);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:5001/students",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"students"
							]
						}
					},
					"response": []
				},
				{
					"name": "Student by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400 for invalid ID format\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response contains appropriate error message for invalid ID\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.error).to.include('Cast to ObjectId failed'); ",
									"});",
									"pm.test(\"Status code is 400 for non-existent ID\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"",
									"pm.test(\"Status code is 200 for valid ID\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response contains required properties\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('name');",
									"    pm.expect(jsonData).to.have.property('age');",
									"    pm.expect(jsonData).to.have.property('teacher'); // Ensure this property exists",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:5001/students/66e34128c73421e8fac0f306",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"students",
								"66e34128c73421e8fac0f306"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update the Sudent",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"// In your update request script",
									"pm.test(\"Capture updated name\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.environment.set(\"updatedName\", jsonData.name); // Capture the updated name",
									"});",
									"pm.test(\"Response contains updated fields\", function () {",
									"    const jsonData = pm.response.json();",
									"    const expectedName = pm.environment.get(\"updatedName\");",
									"    pm.expect(jsonData).to.have.property('name').that.equals(expectedName);",
									"});",
									"",
									"",
									"pm.test(\"Response format is JSON\", function () {",
									"    pm.response.to.be.json;",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"West James\"\n\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:5001/students/66e3403d2b9d41f187f3da49",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"students",
								"66e3403d2b9d41f187f3da49"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete a Student",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:5001/students/66e340192b9d41f187f3da44",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"students",
								"66e340192b9d41f187f3da44"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}